{"version":3,"sources":["Pages/Home/homepageCard.js","Pages/Home/index.js","Toolbar/index.js","Layout/index.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","gridCardWrapper","width","backgroundColor","minHeight","justifyContent","borderRadius","HomepageCard","props","styles","Grid","container","className","xs","children","gridMainContentWrapper","height","paddingTop","steppersToolbarHeader","fontsize","color","Home","item","gridToolbarWrapper","alignItems","steppersToolbarHeaderLogo","Toolbar","gridContentWrapper","Layout","App","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4QAIMA,EAAYC,YAAW,CACzBC,gBAAiB,CACbC,MAAO,OACPC,gBAAiB,OACjBC,UAAW,IACXC,eAAgB,SAChBC,aAAc,MAITC,EAAe,SAACC,GACzB,IAAMC,EAASV,IACf,OACI,kBAACW,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAWH,EAAOR,gBAAiBY,GAAI,IAClDL,EAAMM,WCbbf,EAAYC,YAAW,CACzBe,uBAAwB,CACpBC,OAAQ,IACRd,MAAO,OACPC,gBAAiB,QACjBc,WAAY,KAEhBC,sBAAuB,CACnBC,SAAU,GACVC,MAAO,WAIR,SAASC,IACZ,IAAMZ,EAASV,IACf,OACI,kBAACW,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAWH,EAAOM,wBAC9B,kBAAC,EAAD,KACI,kBAACL,EAAA,EAAD,CAAMY,MAAI,GACN,wBAAIV,UAAWH,EAAOS,uBAAtB,qBCpBpB,IAAMnB,EAAYC,YAAW,CACzBuB,mBAAoB,CAChBP,OAAQ,IACRd,MAAO,OACPC,gBAAiB,QACjBqB,WAAY,YAEhBC,0BAA2B,CACvBN,SAAU,IACVC,MAAO,SAEXF,sBAAuB,CACnBC,SAAU,GACVC,MAAO,WAIR,SAASM,IACZ,IAAMjB,EAASV,IACf,OACI,kBAACW,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAWH,EAAOc,oBAC9B,kBAACb,EAAA,EAAD,CAAMY,MAAI,EAACT,GAAI,GACX,wBAAID,UAAWH,EAAOgB,2BAAtB,kBAEJ,kBAACf,EAAA,EAAD,CAAMY,MAAI,EAACT,GAAI,GACX,wBAAID,UAAWH,EAAOS,uBAAtB,mCCzBhB,IAAMnB,EAAYC,YAAW,CACzB2B,mBAAoB,CAChBvB,UAAW,QACXF,MAAO,OACPC,gBAAiB,QACjBE,eAAgB,UAEpBa,sBAAuB,CACnBC,SAAU,GACVC,MAAO,WAMFQ,EAAS,SAACpB,GACnB,IAAMC,EAASV,IACf,OACI,kBAACW,EAAA,EAAD,CAAMC,WAAS,EAACC,UAAWH,EAAOkB,oBAC9B,kBAACjB,EAAA,EAAD,CAAMY,MAAI,EAACT,GAAI,GACTL,EAAMM,YCZT,SAASe,IACtB,OACE,6BACA,kBAACH,EAAD,MACA,kBAAC,EAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOI,KAAK,UACV,kBAACT,EAAD,OAEF,kBAAC,IAAD,CAAOS,KAAK,UACV,kBAACT,EAAD,OAEF,kBAAC,IAAD,CAAOS,KAAK,KACV,kBAACT,EAAD,WCdMU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.672aec48.chunk.js","sourcesContent":["import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles({\r\n    gridCardWrapper: {\r\n        width: '100%',\r\n        backgroundColor: 'grey',\r\n        minHeight: 300,\r\n        justifyContent: 'center',\r\n        borderRadius: 50\r\n    }\r\n});\r\n  \r\nexport const HomepageCard = (props) => {\r\n    const styles = useStyles();\r\n    return (\r\n        <Grid container className={styles.gridCardWrapper} xs={12}>\r\n            {props.children}\r\n        </Grid>\r\n    )\r\n  }","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { HomepageCard } from './homepageCard'\r\n\r\nconst useStyles = makeStyles({\r\n    gridMainContentWrapper: {\r\n        height: 100,\r\n        width: '100%',\r\n        backgroundColor: 'black',\r\n        paddingTop: 100\r\n    },\r\n    steppersToolbarHeader: {\r\n        fontsize: 30,\r\n        color: 'white'\r\n    }\r\n});\r\n  \r\nexport function Home() {\r\n    const styles = useStyles();\r\n    return (\r\n        <Grid container className={styles.gridMainContentWrapper}>\r\n            <HomepageCard>\r\n                <Grid item>\r\n                    <h1 className={styles.steppersToolbarHeader}>Steppers SSoLo</h1>\r\n                </Grid>\r\n            </HomepageCard>\r\n        </Grid>\r\n    )\r\n  }","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles({\r\n    gridToolbarWrapper: {\r\n        height: 100,\r\n        width: '100%',\r\n        backgroundColor: 'black',\r\n        alignItems: 'flex-end'\r\n    },\r\n    steppersToolbarHeaderLogo: {\r\n        fontsize: 100,\r\n        color: 'white'\r\n    },\r\n    steppersToolbarHeader: {\r\n        fontsize: 30,\r\n        color: 'white'\r\n    }\r\n});\r\n  \r\nexport function Toolbar() {\r\n    const styles = useStyles();\r\n    return (\r\n        <Grid container className={styles.gridToolbarWrapper}>\r\n            <Grid item xs={9}>\r\n                <h1 className={styles.steppersToolbarHeaderLogo}>Steppers Club</h1>\r\n            </Grid>\r\n            <Grid item xs={3}>\r\n                <h2 className={styles.steppersToolbarHeader}>Home to all Garaj Paedophiles</h2>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n  }","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nconst useStyles = makeStyles({\r\n    gridContentWrapper: {\r\n        minHeight: '100vh',\r\n        width: '100%',\r\n        backgroundColor: 'black',\r\n        justifyContent: 'center'\r\n    },\r\n    steppersToolbarHeader: {\r\n        fontsize: 30,\r\n        color: 'white'\r\n    }\r\n});\r\n  \r\n\r\n  \r\nexport const Layout = (props) => {\r\n    const styles = useStyles();\r\n    return (\r\n        <Grid container className={styles.gridContentWrapper}>\r\n            <Grid item xs={8}>\r\n                { props.children }\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n  }","import React from 'react';\r\nimport './App.css';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport { Home } from './Pages/Home'\r\nimport { Toolbar } from './Toolbar'\r\nimport { Layout } from './Layout'\r\n\r\nexport default function App() {\r\n  return (\r\n    <div>\r\n    <Toolbar/>\r\n    <Layout>\r\n      <Router>\r\n          <Switch>\r\n            <Route path=\"/about\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/users\">\r\n              <Home />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n      </Router>\r\n    </Layout>\r\n    </div>\r\n  );\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();"],"sourceRoot":""}